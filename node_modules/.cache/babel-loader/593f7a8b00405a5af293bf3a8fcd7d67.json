{"ast":null,"code":"import _slicedToArray from \"/Users/ryanmeinzer/Flatiron/Mod6/translator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ryanmeinzer/Flatiron/Mod6/translator/src/components/languages.js\";\n\n/* eslint-disable */\nimport React, { useState } from \"react\";\nconst LANGUAGES = [{\n  label: \"Afrikaans\",\n  value: \"af\"\n}, {\n  label: \"Arabic\",\n  value: \"ar\"\n}, {\n  label: \"French\",\n  value: \"fr\"\n}, {\n  label: \"Hindi\",\n  value: \"hi\"\n}, {\n  label: \"Japanese\",\n  value: \"ja\"\n}, {\n  label: \"Portuguese\",\n  value: \"pt\"\n}, {\n  label: \"Russian\",\n  value: \"ru\"\n}, {\n  label: \"Simplified Chinese\",\n  value: \"zh-CN\"\n}, {\n  label: \"Spanish\",\n  value: \"es\"\n}, {\n  label: \"Swahili\",\n  value: \"sw\"\n}, {\n  label: \"Thai\",\n  value: \"th\"\n}];\n\nconst Languages = ({\n  language,\n  onLanguageChange\n}) => {\n  if (language === undefined) {\n    language = \"es\";\n  }\n\n  const languageConfig = LANGUAGES.find(l => l.value === language);\n\n  if (!languageConfig) {\n    throw new Error(\"Unknown language code '\".concat(language, \"'\"));\n  }\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        open = _useState2[0],\n        setOpen = _useState2[1];\n\n  const onSelect = language => {\n    setOpen(false);\n    onLanguageChange(language);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"Select Language\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown \".concat(open && \"is-active\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-trigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: () => setOpen(!open),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 25\n    }\n  }, languageConfig.label), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icon is-small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-angle-down\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }, LANGUAGES.map(({\n    label,\n    value\n  }) => {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#\",\n      onClick: () => onSelect(value),\n      className: \"dropdown-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 33\n      }\n    }, label);\n  })))));\n};\n\nexport default Languages;","map":{"version":3,"sources":["/Users/ryanmeinzer/Flatiron/Mod6/translator/src/components/languages.js"],"names":["React","useState","LANGUAGES","label","value","Languages","language","onLanguageChange","undefined","languageConfig","find","l","Error","open","setOpen","onSelect","map"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\nimport React, { useState } from \"react\";\n\nconst LANGUAGES = [\n    { label: \"Afrikaans\", value: \"af\" },\n    { label: \"Arabic\", value: \"ar\" },\n    { label: \"French\", value: \"fr\" },\n    { label: \"Hindi\", value: \"hi\" },\n    { label: \"Japanese\", value: \"ja\" },\n    { label: \"Portuguese\", value: \"pt\" },\n    { label: \"Russian\", value: \"ru\" },\n    { label: \"Simplified Chinese\", value: \"zh-CN\" },\n    { label: \"Spanish\", value: \"es\" },\n    { label: \"Swahili\", value: \"sw\" },\n    { label: \"Thai\", value: \"th\" }\n];\n\nconst Languages = ({ language, onLanguageChange }) => {\n    if (language === undefined) {\n        language = \"es\";\n    }\n    const languageConfig = LANGUAGES.find(l => l.value === language);\n    if (!languageConfig) {\n        throw new Error(`Unknown language code '${language}'`);\n    }\n\n    const [open, setOpen] = useState(false);\n\n    const onSelect = language => {\n        setOpen(false);\n        onLanguageChange(language);\n    };\n\n    return (\n        <div>\n            <label className=\"label\">Select Language</label>\n            <div className={`dropdown ${open && \"is-active\"}`}>\n                <div className=\"dropdown-trigger\">\n                    <button className=\"button\" onClick={() => setOpen(!open)}>\n                        <span>{languageConfig.label}</span>\n                        <span className=\"icon is-small\">\n                            <i className=\"fas fa-angle-down\" />\n                        </span>\n                    </button>\n                </div>\n                <div className=\"dropdown-menu\">\n                    <div className=\"dropdown-content\">\n                        {LANGUAGES.map(({ label, value }) => {\n                            return (\n                                <a\n                                    href=\"#\"\n                                    onClick={() => onSelect(value)}\n                                    className=\"dropdown-item\"\n                                >\n                                    {label}\n                                </a>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Languages;\n"]},"metadata":{},"sourceType":"module"}